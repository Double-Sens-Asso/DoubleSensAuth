import { checkEmail, markEmailUsed } from "./nocodb.js";
import { checkMessage }              from "./checkmessage.js";
import { logPerUser }                from "./logger.js";

export async function handleMessage(message, client) {
  const now   = new Date().toLocaleString("fr-FR");
  const email = checkMessage(message) || "";
  const details = {
    Date:        now,
    "Message priv√©": "Oui",
    Contenu:     message.content,
    Email:       email || "[invalide]"
  };

  if (!email) {
    details.Statut = "Email invalide";
    await logPerUser("[ERREUR] Email invalide", details, client, message.author);
    return message.author.send("‚ùå Email invalide.");
  }

  const { found, used, discordUsed } = await checkEmail(email, message.author.id);
  Object.assign(details, {
    "Dans la base":  found,
    "D√©j√† valid√©":   used,
    "DiscordID li√©": discordUsed
  });

  if (!found) {
    details.Statut = "Email non trouv√©";
    await logPerUser("[√âCHEC] Email introuvable", details, client, message.author);
    return message.author.send("‚ùå Email inconnu.");
  }
  if (used) {
    details.Statut = "Email d√©j√† utilis√©";
    await logPerUser("[INFO] Email d√©j√† utilis√©", details, client, message.author);
    return message.author.send("‚ö†Ô∏è Email d√©j√† valid√©.");
  }
  if (discordUsed) {
    details.Statut = "Discord d√©j√† li√©";
    await logPerUser("[√âCHEC] Discord doublon", details, client, message.author);
    return message.author.send("‚ö†Ô∏è Discord d√©j√† li√©.");
  }

  const ok = await markEmailUsed(email, message);
  details["Marquage en base"] = ok ? "OK" : "√âchec";
  if (!ok) {
    details.Statut = "√âchec marquage";
    await logPerUser("[ERREUR] Marquage √©chou√©", details, client, message.author);
    return message.author.send("‚ùå Erreur de validation.");
  }

  try {
    const guild  = client.guilds.cache.get(process.env.GUILD_ID);
    const member = await guild.members.fetch(message.author.id);
    await member.roles.add(process.env.ROLE_ID);
    details.Statut = "Validation compl√®te + r√¥le attribu√©";
    await logPerUser("[SUCC√àS] Validation user", details, client, message.author);
    return message.author.send("‚úÖ Valid√© et r√¥le attribu√© !");
  } catch (err) {
    details.Statut = "Validation OK, r√¥le √©chou√©";
    details.Erreur  = err.message;
    await logPerUser("[PARTIEL] R√¥le non attribu√©", details, client, message.author);
    return message.author.send(`‚úÖ Valid√© (mais r√¥le non attribu√©).\nüõ†Ô∏è ${err.message}`);
  }
}
